#include "FoodSpawner.h"
#include "Utilities/Utilities.h"

#include <sstream>
#include <string>
#include <stdio.h>

USING_NS_CC;

void FoodSpawner::spawnFood(cocos2d::Layer *layerToSpawn)
{
    SpriteFrameCache* cache = SpriteFrameCache::getInstance();
    foodbatch = SpriteBatchNode::create("Atlases/food.png");
    cache->addSpriteFramesWithFile("Atlases/food.plist");

    foodAmount = 10;
    offsetFromCenter = 384;
    Size visibleSize = Director::getInstance()->getVisibleSize();

    for (int i = 0; i < foodAmount; i++)
    {
    	float currentAngle = ((UTIL::PI*2) / (float)foodAmount) * (float)i;
    	int randomSprite = arc4random() % 4;

    	std::ostringstream temp;
    	temp << randomSprite;
    	Sprite *sprite = Sprite::createWithSpriteFrameName("food" + temp.str() + ".png");

    	sprite->setPosition(Vec2(cos(currentAngle) * offsetFromCenter,
    							 sin(currentAngle) * offsetFromCenter));

    	sprite->setScale(0.75f);

    	foodbatch->addChild(sprite, 9);
    }

    foodbatch->setPosition(visibleSize.width/2, visibleSize.height + (visibleSize.height/6));

    foodLeftLabel = CCLabelTTF::create("Food Left: 0", "fonts/Marker Felt", 12,
                                       CCSizeMake(visibleSize.width/2, visibleSize.height/2), kCCTextAlignmentCenter);

    scoreLabel->setString(score);

    layerToSpawn->addChild(foodbatch);
}

void FoodSpawner::updateFood(float delta)
{
	float spinSpeed = 2;
	currentAngle += (delta * spinSpeed);

	if (currentAngle > UTIL::PI*2)
	{
		currentAngle = 0;
	}

	const cocos2d::Vector<Node*> foodChildren = foodbatch->getChildren();
	for (int i = 0; i < foodChildren.size(); i++)
	{
    	float offsetAngle = (((UTIL::PI*2) / (float)foodAmount) * (float)i) + currentAngle;
    	foodChildren.at(i)->setPosition(Vec2(cos(offsetAngle) * offsetFromCenter,
    							 	 	 	 sin(offsetAngle) * offsetFromCenter));
	}

    foodLeftLabel->setString(foodLeft);
    scoreLabel->setString(score);
}

void FoodSpawner::resetFood()
{
	const cocos2d::Vector<Node*> foodChildren = foodbatch->getChildren();

	for (int i = 0; i < foodChildren.size(); i++)
	{
		foodChildren.at(i)->setVisible(true);
	}
}

void FoodSpawner::grabFood(Vec2 mouthPos)
{
	const cocos2d::Vector<Node*> foodChildren = foodbatch->getChildren();
	Node *parentFood = foodbatch->getParent();

	if (foodLeft < 0)
	{
		resetFood();
		foodLeft = foodAmount;
		score++;
	}

	for (int i = 0; i < foodChildren.size(); i++)
	{
		Node* foodNode = foodChildren.at(i);
		Vec2 foodWorldPos = foodbatch->getPosition() + foodNode->getPosition();

		cocos2d::log("Food Children: %d", (int)UTIL::distance(foodWorldPos, mouthPos));

		if (UTIL::distance(foodWorldPos, mouthPos) < 128)
		{
			//foodbatch->removeChild(foodChildren.at(i), true);
			foodChildren.at(i)->setVisible(false);
			foodLeft -= 1;
			break;
		}
	}
}
